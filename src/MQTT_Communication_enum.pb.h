// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MQTT_Communication_enum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MQTT_5fCommunication_5fenum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MQTT_5fCommunication_5fenum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MQTT_5fCommunication_5fenum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MQTT_5fCommunication_5fenum_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MQTT_5fCommunication_5fenum_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace dispatch {

enum ActionType : int {
  GoForward = 0,
  Stop = 1,
  Parking = 2,
  ActionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ActionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ActionType_IsValid(int value);
constexpr ActionType ActionType_MIN = GoForward;
constexpr ActionType ActionType_MAX = Parking;
constexpr int ActionType_ARRAYSIZE = ActionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionType_descriptor();
template<typename T>
inline const std::string& ActionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ActionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ActionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ActionType_descriptor(), enum_t_value);
}
inline bool ActionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ActionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ActionType>(
    ActionType_descriptor(), name, value);
}
enum TaskType : int {
  LoadUnit = 0,
  UnloadUnit = 1,
  TaskType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TaskType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TaskType_IsValid(int value);
constexpr TaskType TaskType_MIN = LoadUnit;
constexpr TaskType TaskType_MAX = UnloadUnit;
constexpr int TaskType_ARRAYSIZE = TaskType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskType_descriptor();
template<typename T>
inline const std::string& TaskType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TaskType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TaskType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TaskType_descriptor(), enum_t_value);
}
inline bool TaskType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TaskType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TaskType>(
    TaskType_descriptor(), name, value);
}
enum VehicleJobState : int {
  Offline = 0,
  Idle = 1,
  EmptyTransport = 2,
  HeavyTransport = 3,
  WaitingLoad = 4,
  LoadingUnit = 5,
  WaitingUnload = 6,
  UnloadingUnit = 7,
  VehicleJobState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  VehicleJobState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool VehicleJobState_IsValid(int value);
constexpr VehicleJobState VehicleJobState_MIN = Offline;
constexpr VehicleJobState VehicleJobState_MAX = UnloadingUnit;
constexpr int VehicleJobState_ARRAYSIZE = VehicleJobState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleJobState_descriptor();
template<typename T>
inline const std::string& VehicleJobState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VehicleJobState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VehicleJobState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VehicleJobState_descriptor(), enum_t_value);
}
inline bool VehicleJobState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VehicleJobState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VehicleJobState>(
    VehicleJobState_descriptor(), name, value);
}
enum DrivingMode : int {
  LocalDrivingMode = 0,
  TelecontrolMode = 1,
  RemoteMode = 2,
  AutoMode = 3,
  DrivingMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DrivingMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DrivingMode_IsValid(int value);
constexpr DrivingMode DrivingMode_MIN = LocalDrivingMode;
constexpr DrivingMode DrivingMode_MAX = AutoMode;
constexpr int DrivingMode_ARRAYSIZE = DrivingMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DrivingMode_descriptor();
template<typename T>
inline const std::string& DrivingMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DrivingMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DrivingMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DrivingMode_descriptor(), enum_t_value);
}
inline bool DrivingMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DrivingMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DrivingMode>(
    DrivingMode_descriptor(), name, value);
}
enum VehicleMotionState : int {
  StationaryState = 0,
  ForwardState = 1,
  BackState = 2,
  UnknownMotionState = 3,
  VehicleMotionState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  VehicleMotionState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool VehicleMotionState_IsValid(int value);
constexpr VehicleMotionState VehicleMotionState_MIN = StationaryState;
constexpr VehicleMotionState VehicleMotionState_MAX = UnknownMotionState;
constexpr int VehicleMotionState_ARRAYSIZE = VehicleMotionState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleMotionState_descriptor();
template<typename T>
inline const std::string& VehicleMotionState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VehicleMotionState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VehicleMotionState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VehicleMotionState_descriptor(), enum_t_value);
}
inline bool VehicleMotionState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VehicleMotionState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VehicleMotionState>(
    VehicleMotionState_descriptor(), name, value);
}
enum FaultType : int {
  VehicleFault = 0,
  AutonomousDrivingFault = 1,
  RemoteDrivingFault = 2,
  CommunicationSystemFault = 3,
  LocalizaionSystemFault = 4,
  FaultType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  FaultType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool FaultType_IsValid(int value);
constexpr FaultType FaultType_MIN = VehicleFault;
constexpr FaultType FaultType_MAX = LocalizaionSystemFault;
constexpr int FaultType_ARRAYSIZE = FaultType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FaultType_descriptor();
template<typename T>
inline const std::string& FaultType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FaultType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FaultType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FaultType_descriptor(), enum_t_value);
}
inline bool FaultType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FaultType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FaultType>(
    FaultType_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace dispatch

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::dispatch::ActionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dispatch::ActionType>() {
  return ::dispatch::ActionType_descriptor();
}
template <> struct is_proto_enum< ::dispatch::TaskType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dispatch::TaskType>() {
  return ::dispatch::TaskType_descriptor();
}
template <> struct is_proto_enum< ::dispatch::VehicleJobState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dispatch::VehicleJobState>() {
  return ::dispatch::VehicleJobState_descriptor();
}
template <> struct is_proto_enum< ::dispatch::DrivingMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dispatch::DrivingMode>() {
  return ::dispatch::DrivingMode_descriptor();
}
template <> struct is_proto_enum< ::dispatch::VehicleMotionState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dispatch::VehicleMotionState>() {
  return ::dispatch::VehicleMotionState_descriptor();
}
template <> struct is_proto_enum< ::dispatch::FaultType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dispatch::FaultType>() {
  return ::dispatch::FaultType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MQTT_5fCommunication_5fenum_2eproto
