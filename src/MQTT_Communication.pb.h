// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MQTT_Communication.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MQTT_5fCommunication_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MQTT_5fCommunication_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MQTT_5fCommunication_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MQTT_5fCommunication_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MQTT_5fCommunication_2eproto;
namespace dispatch {
class Current_path;
class Current_pathDefaultTypeInternal;
extern Current_pathDefaultTypeInternal _Current_path_default_instance_;
class Current_pose;
class Current_poseDefaultTypeInternal;
extern Current_poseDefaultTypeInternal _Current_pose_default_instance_;
class Current_twist;
class Current_twistDefaultTypeInternal;
extern Current_twistDefaultTypeInternal _Current_twist_default_instance_;
class Goal_pose;
class Goal_poseDefaultTypeInternal;
extern Goal_poseDefaultTypeInternal _Goal_pose_default_instance_;
class Goal_twist;
class Goal_twistDefaultTypeInternal;
extern Goal_twistDefaultTypeInternal _Goal_twist_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Multiple_goal;
class Multiple_goalDefaultTypeInternal;
extern Multiple_goalDefaultTypeInternal _Multiple_goal_default_instance_;
class Path;
class PathDefaultTypeInternal;
extern PathDefaultTypeInternal _Path_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Pose;
class PoseDefaultTypeInternal;
extern PoseDefaultTypeInternal _Pose_default_instance_;
class PoseStamped;
class PoseStampedDefaultTypeInternal;
extern PoseStampedDefaultTypeInternal _PoseStamped_default_instance_;
class Quaternion;
class QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class Time;
class TimeDefaultTypeInternal;
extern TimeDefaultTypeInternal _Time_default_instance_;
class Twist;
class TwistDefaultTypeInternal;
extern TwistDefaultTypeInternal _Twist_default_instance_;
class Vector3;
class Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
}  // namespace dispatch
PROTOBUF_NAMESPACE_OPEN
template<> ::dispatch::Current_path* Arena::CreateMaybeMessage<::dispatch::Current_path>(Arena*);
template<> ::dispatch::Current_pose* Arena::CreateMaybeMessage<::dispatch::Current_pose>(Arena*);
template<> ::dispatch::Current_twist* Arena::CreateMaybeMessage<::dispatch::Current_twist>(Arena*);
template<> ::dispatch::Goal_pose* Arena::CreateMaybeMessage<::dispatch::Goal_pose>(Arena*);
template<> ::dispatch::Goal_twist* Arena::CreateMaybeMessage<::dispatch::Goal_twist>(Arena*);
template<> ::dispatch::Header* Arena::CreateMaybeMessage<::dispatch::Header>(Arena*);
template<> ::dispatch::Multiple_goal* Arena::CreateMaybeMessage<::dispatch::Multiple_goal>(Arena*);
template<> ::dispatch::Path* Arena::CreateMaybeMessage<::dispatch::Path>(Arena*);
template<> ::dispatch::Point* Arena::CreateMaybeMessage<::dispatch::Point>(Arena*);
template<> ::dispatch::Pose* Arena::CreateMaybeMessage<::dispatch::Pose>(Arena*);
template<> ::dispatch::PoseStamped* Arena::CreateMaybeMessage<::dispatch::PoseStamped>(Arena*);
template<> ::dispatch::Quaternion* Arena::CreateMaybeMessage<::dispatch::Quaternion>(Arena*);
template<> ::dispatch::Time* Arena::CreateMaybeMessage<::dispatch::Time>(Arena*);
template<> ::dispatch::Twist* Arena::CreateMaybeMessage<::dispatch::Twist>(Arena*);
template<> ::dispatch::Vector3* Arena::CreateMaybeMessage<::dispatch::Vector3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dispatch {

// ===================================================================

class Time PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dispatch.Time) */ {
 public:
  inline Time() : Time(nullptr) {};
  virtual ~Time();

  Time(const Time& from);
  Time(Time&& from) noexcept
    : Time() {
    *this = ::std::move(from);
  }

  inline Time& operator=(const Time& from) {
    CopyFrom(from);
    return *this;
  }
  inline Time& operator=(Time&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Time& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Time* internal_default_instance() {
    return reinterpret_cast<const Time*>(
               &_Time_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Time& a, Time& b) {
    a.Swap(&b);
  }
  inline void Swap(Time* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Time* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Time* New() const final {
    return CreateMaybeMessage<Time>(nullptr);
  }

  Time* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Time>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Time& from);
  void MergeFrom(const Time& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Time* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dispatch.Time";
  }
  protected:
  explicit Time(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MQTT_5fCommunication_2eproto);
    return ::descriptor_table_MQTT_5fCommunication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecFieldNumber = 1,
    kNsecFieldNumber = 2,
  };
  // int32 sec = 1;
  void clear_sec();
  ::PROTOBUF_NAMESPACE_ID::int32 sec() const;
  void set_sec(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sec() const;
  void _internal_set_sec(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nsec = 2;
  void clear_nsec();
  ::PROTOBUF_NAMESPACE_ID::int32 nsec() const;
  void set_nsec(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nsec() const;
  void _internal_set_nsec(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:dispatch.Time)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 sec_;
  ::PROTOBUF_NAMESPACE_ID::int32 nsec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MQTT_5fCommunication_2eproto;
};
// -------------------------------------------------------------------

class Header PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dispatch.Header) */ {
 public:
  inline Header() : Header(nullptr) {};
  virtual ~Header();

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Header& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Header* New() const final {
    return CreateMaybeMessage<Header>(nullptr);
  }

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dispatch.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MQTT_5fCommunication_2eproto);
    return ::descriptor_table_MQTT_5fCommunication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameIdFieldNumber = 2,
    kStampFieldNumber = 1,
  };
  // string frame_id = 2;
  void clear_frame_id();
  const std::string& frame_id() const;
  void set_frame_id(const std::string& value);
  void set_frame_id(std::string&& value);
  void set_frame_id(const char* value);
  void set_frame_id(const char* value, size_t size);
  std::string* mutable_frame_id();
  std::string* release_frame_id();
  void set_allocated_frame_id(std::string* frame_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_frame_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_frame_id(
      std::string* frame_id);
  private:
  const std::string& _internal_frame_id() const;
  void _internal_set_frame_id(const std::string& value);
  std::string* _internal_mutable_frame_id();
  public:

  // .dispatch.Time stamp = 1;
  bool has_stamp() const;
  private:
  bool _internal_has_stamp() const;
  public:
  void clear_stamp();
  const ::dispatch::Time& stamp() const;
  ::dispatch::Time* release_stamp();
  ::dispatch::Time* mutable_stamp();
  void set_allocated_stamp(::dispatch::Time* stamp);
  private:
  const ::dispatch::Time& _internal_stamp() const;
  ::dispatch::Time* _internal_mutable_stamp();
  public:
  void unsafe_arena_set_allocated_stamp(
      ::dispatch::Time* stamp);
  ::dispatch::Time* unsafe_arena_release_stamp();

  // @@protoc_insertion_point(class_scope:dispatch.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_id_;
  ::dispatch::Time* stamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MQTT_5fCommunication_2eproto;
};
// -------------------------------------------------------------------

class Point PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dispatch.Point) */ {
 public:
  inline Point() : Point(nullptr) {};
  virtual ~Point();

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(nullptr);
  }

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dispatch.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MQTT_5fCommunication_2eproto);
    return ::descriptor_table_MQTT_5fCommunication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:dispatch.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MQTT_5fCommunication_2eproto;
};
// -------------------------------------------------------------------

class Quaternion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dispatch.Quaternion) */ {
 public:
  inline Quaternion() : Quaternion(nullptr) {};
  virtual ~Quaternion();

  Quaternion(const Quaternion& from);
  Quaternion(Quaternion&& from) noexcept
    : Quaternion() {
    *this = ::std::move(from);
  }

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternion& operator=(Quaternion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Quaternion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Quaternion* internal_default_instance() {
    return reinterpret_cast<const Quaternion*>(
               &_Quaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Quaternion& a, Quaternion& b) {
    a.Swap(&b);
  }
  inline void Swap(Quaternion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quaternion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Quaternion* New() const final {
    return CreateMaybeMessage<Quaternion>(nullptr);
  }

  Quaternion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Quaternion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Quaternion& from);
  void MergeFrom(const Quaternion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quaternion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dispatch.Quaternion";
  }
  protected:
  explicit Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MQTT_5fCommunication_2eproto);
    return ::descriptor_table_MQTT_5fCommunication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // double w = 4;
  void clear_w();
  double w() const;
  void set_w(double value);
  private:
  double _internal_w() const;
  void _internal_set_w(double value);
  public:

  // @@protoc_insertion_point(class_scope:dispatch.Quaternion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  double w_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MQTT_5fCommunication_2eproto;
};
// -------------------------------------------------------------------

class Pose PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dispatch.Pose) */ {
 public:
  inline Pose() : Pose(nullptr) {};
  virtual ~Pose();

  Pose(const Pose& from);
  Pose(Pose&& from) noexcept
    : Pose() {
    *this = ::std::move(from);
  }

  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose& operator=(Pose&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pose* internal_default_instance() {
    return reinterpret_cast<const Pose*>(
               &_Pose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Pose& a, Pose& b) {
    a.Swap(&b);
  }
  inline void Swap(Pose* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pose* New() const final {
    return CreateMaybeMessage<Pose>(nullptr);
  }

  Pose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pose& from);
  void MergeFrom(const Pose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dispatch.Pose";
  }
  protected:
  explicit Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MQTT_5fCommunication_2eproto);
    return ::descriptor_table_MQTT_5fCommunication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kOrientationFieldNumber = 2,
  };
  // .dispatch.Point position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::dispatch::Point& position() const;
  ::dispatch::Point* release_position();
  ::dispatch::Point* mutable_position();
  void set_allocated_position(::dispatch::Point* position);
  private:
  const ::dispatch::Point& _internal_position() const;
  ::dispatch::Point* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::dispatch::Point* position);
  ::dispatch::Point* unsafe_arena_release_position();

  // .dispatch.Quaternion orientation = 2;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::dispatch::Quaternion& orientation() const;
  ::dispatch::Quaternion* release_orientation();
  ::dispatch::Quaternion* mutable_orientation();
  void set_allocated_orientation(::dispatch::Quaternion* orientation);
  private:
  const ::dispatch::Quaternion& _internal_orientation() const;
  ::dispatch::Quaternion* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::dispatch::Quaternion* orientation);
  ::dispatch::Quaternion* unsafe_arena_release_orientation();

  // @@protoc_insertion_point(class_scope:dispatch.Pose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::dispatch::Point* position_;
  ::dispatch::Quaternion* orientation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MQTT_5fCommunication_2eproto;
};
// -------------------------------------------------------------------

class PoseStamped PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dispatch.PoseStamped) */ {
 public:
  inline PoseStamped() : PoseStamped(nullptr) {};
  virtual ~PoseStamped();

  PoseStamped(const PoseStamped& from);
  PoseStamped(PoseStamped&& from) noexcept
    : PoseStamped() {
    *this = ::std::move(from);
  }

  inline PoseStamped& operator=(const PoseStamped& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoseStamped& operator=(PoseStamped&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PoseStamped& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PoseStamped* internal_default_instance() {
    return reinterpret_cast<const PoseStamped*>(
               &_PoseStamped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PoseStamped& a, PoseStamped& b) {
    a.Swap(&b);
  }
  inline void Swap(PoseStamped* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoseStamped* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoseStamped* New() const final {
    return CreateMaybeMessage<PoseStamped>(nullptr);
  }

  PoseStamped* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoseStamped>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PoseStamped& from);
  void MergeFrom(const PoseStamped& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoseStamped* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dispatch.PoseStamped";
  }
  protected:
  explicit PoseStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MQTT_5fCommunication_2eproto);
    return ::descriptor_table_MQTT_5fCommunication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kPoseFieldNumber = 2,
  };
  // .dispatch.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::dispatch::Header& header() const;
  ::dispatch::Header* release_header();
  ::dispatch::Header* mutable_header();
  void set_allocated_header(::dispatch::Header* header);
  private:
  const ::dispatch::Header& _internal_header() const;
  ::dispatch::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::dispatch::Header* header);
  ::dispatch::Header* unsafe_arena_release_header();

  // .dispatch.Pose pose = 2;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::dispatch::Pose& pose() const;
  ::dispatch::Pose* release_pose();
  ::dispatch::Pose* mutable_pose();
  void set_allocated_pose(::dispatch::Pose* pose);
  private:
  const ::dispatch::Pose& _internal_pose() const;
  ::dispatch::Pose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::dispatch::Pose* pose);
  ::dispatch::Pose* unsafe_arena_release_pose();

  // @@protoc_insertion_point(class_scope:dispatch.PoseStamped)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::dispatch::Header* header_;
  ::dispatch::Pose* pose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MQTT_5fCommunication_2eproto;
};
// -------------------------------------------------------------------

class Path PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dispatch.Path) */ {
 public:
  inline Path() : Path(nullptr) {};
  virtual ~Path();

  Path(const Path& from);
  Path(Path&& from) noexcept
    : Path() {
    *this = ::std::move(from);
  }

  inline Path& operator=(const Path& from) {
    CopyFrom(from);
    return *this;
  }
  inline Path& operator=(Path&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Path& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Path* internal_default_instance() {
    return reinterpret_cast<const Path*>(
               &_Path_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Path& a, Path& b) {
    a.Swap(&b);
  }
  inline void Swap(Path* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Path* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Path* New() const final {
    return CreateMaybeMessage<Path>(nullptr);
  }

  Path* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Path>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Path& from);
  void MergeFrom(const Path& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Path* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dispatch.Path";
  }
  protected:
  explicit Path(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MQTT_5fCommunication_2eproto);
    return ::descriptor_table_MQTT_5fCommunication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .dispatch.PoseStamped pose = 2;
  int pose_size() const;
  private:
  int _internal_pose_size() const;
  public:
  void clear_pose();
  ::dispatch::PoseStamped* mutable_pose(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dispatch::PoseStamped >*
      mutable_pose();
  private:
  const ::dispatch::PoseStamped& _internal_pose(int index) const;
  ::dispatch::PoseStamped* _internal_add_pose();
  public:
  const ::dispatch::PoseStamped& pose(int index) const;
  ::dispatch::PoseStamped* add_pose();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dispatch::PoseStamped >&
      pose() const;

  // .dispatch.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::dispatch::Header& header() const;
  ::dispatch::Header* release_header();
  ::dispatch::Header* mutable_header();
  void set_allocated_header(::dispatch::Header* header);
  private:
  const ::dispatch::Header& _internal_header() const;
  ::dispatch::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::dispatch::Header* header);
  ::dispatch::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:dispatch.Path)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dispatch::PoseStamped > pose_;
  ::dispatch::Header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MQTT_5fCommunication_2eproto;
};
// -------------------------------------------------------------------

class Vector3 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dispatch.Vector3) */ {
 public:
  inline Vector3() : Vector3(nullptr) {};
  virtual ~Vector3();

  Vector3(const Vector3& from);
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector3* New() const final {
    return CreateMaybeMessage<Vector3>(nullptr);
  }

  Vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector3& from);
  void MergeFrom(const Vector3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dispatch.Vector3";
  }
  protected:
  explicit Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MQTT_5fCommunication_2eproto);
    return ::descriptor_table_MQTT_5fCommunication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:dispatch.Vector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MQTT_5fCommunication_2eproto;
};
// -------------------------------------------------------------------

class Twist PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dispatch.Twist) */ {
 public:
  inline Twist() : Twist(nullptr) {};
  virtual ~Twist();

  Twist(const Twist& from);
  Twist(Twist&& from) noexcept
    : Twist() {
    *this = ::std::move(from);
  }

  inline Twist& operator=(const Twist& from) {
    CopyFrom(from);
    return *this;
  }
  inline Twist& operator=(Twist&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Twist& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Twist* internal_default_instance() {
    return reinterpret_cast<const Twist*>(
               &_Twist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Twist& a, Twist& b) {
    a.Swap(&b);
  }
  inline void Swap(Twist* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Twist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Twist* New() const final {
    return CreateMaybeMessage<Twist>(nullptr);
  }

  Twist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Twist>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Twist& from);
  void MergeFrom(const Twist& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Twist* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dispatch.Twist";
  }
  protected:
  explicit Twist(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MQTT_5fCommunication_2eproto);
    return ::descriptor_table_MQTT_5fCommunication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinearFieldNumber = 1,
    kAngularFieldNumber = 2,
  };
  // .dispatch.Vector3 linear = 1;
  bool has_linear() const;
  private:
  bool _internal_has_linear() const;
  public:
  void clear_linear();
  const ::dispatch::Vector3& linear() const;
  ::dispatch::Vector3* release_linear();
  ::dispatch::Vector3* mutable_linear();
  void set_allocated_linear(::dispatch::Vector3* linear);
  private:
  const ::dispatch::Vector3& _internal_linear() const;
  ::dispatch::Vector3* _internal_mutable_linear();
  public:
  void unsafe_arena_set_allocated_linear(
      ::dispatch::Vector3* linear);
  ::dispatch::Vector3* unsafe_arena_release_linear();

  // .dispatch.Vector3 angular = 2;
  bool has_angular() const;
  private:
  bool _internal_has_angular() const;
  public:
  void clear_angular();
  const ::dispatch::Vector3& angular() const;
  ::dispatch::Vector3* release_angular();
  ::dispatch::Vector3* mutable_angular();
  void set_allocated_angular(::dispatch::Vector3* angular);
  private:
  const ::dispatch::Vector3& _internal_angular() const;
  ::dispatch::Vector3* _internal_mutable_angular();
  public:
  void unsafe_arena_set_allocated_angular(
      ::dispatch::Vector3* angular);
  ::dispatch::Vector3* unsafe_arena_release_angular();

  // @@protoc_insertion_point(class_scope:dispatch.Twist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::dispatch::Vector3* linear_;
  ::dispatch::Vector3* angular_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MQTT_5fCommunication_2eproto;
};
// -------------------------------------------------------------------

class Current_pose PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dispatch.Current_pose) */ {
 public:
  inline Current_pose() : Current_pose(nullptr) {};
  virtual ~Current_pose();

  Current_pose(const Current_pose& from);
  Current_pose(Current_pose&& from) noexcept
    : Current_pose() {
    *this = ::std::move(from);
  }

  inline Current_pose& operator=(const Current_pose& from) {
    CopyFrom(from);
    return *this;
  }
  inline Current_pose& operator=(Current_pose&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Current_pose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Current_pose* internal_default_instance() {
    return reinterpret_cast<const Current_pose*>(
               &_Current_pose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Current_pose& a, Current_pose& b) {
    a.Swap(&b);
  }
  inline void Swap(Current_pose* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Current_pose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Current_pose* New() const final {
    return CreateMaybeMessage<Current_pose>(nullptr);
  }

  Current_pose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Current_pose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Current_pose& from);
  void MergeFrom(const Current_pose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Current_pose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dispatch.Current_pose";
  }
  protected:
  explicit Current_pose(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MQTT_5fCommunication_2eproto);
    return ::descriptor_table_MQTT_5fCommunication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 1,
  };
  // .dispatch.Pose pose = 1;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::dispatch::Pose& pose() const;
  ::dispatch::Pose* release_pose();
  ::dispatch::Pose* mutable_pose();
  void set_allocated_pose(::dispatch::Pose* pose);
  private:
  const ::dispatch::Pose& _internal_pose() const;
  ::dispatch::Pose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::dispatch::Pose* pose);
  ::dispatch::Pose* unsafe_arena_release_pose();

  // @@protoc_insertion_point(class_scope:dispatch.Current_pose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::dispatch::Pose* pose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MQTT_5fCommunication_2eproto;
};
// -------------------------------------------------------------------

class Current_twist PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dispatch.Current_twist) */ {
 public:
  inline Current_twist() : Current_twist(nullptr) {};
  virtual ~Current_twist();

  Current_twist(const Current_twist& from);
  Current_twist(Current_twist&& from) noexcept
    : Current_twist() {
    *this = ::std::move(from);
  }

  inline Current_twist& operator=(const Current_twist& from) {
    CopyFrom(from);
    return *this;
  }
  inline Current_twist& operator=(Current_twist&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Current_twist& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Current_twist* internal_default_instance() {
    return reinterpret_cast<const Current_twist*>(
               &_Current_twist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Current_twist& a, Current_twist& b) {
    a.Swap(&b);
  }
  inline void Swap(Current_twist* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Current_twist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Current_twist* New() const final {
    return CreateMaybeMessage<Current_twist>(nullptr);
  }

  Current_twist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Current_twist>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Current_twist& from);
  void MergeFrom(const Current_twist& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Current_twist* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dispatch.Current_twist";
  }
  protected:
  explicit Current_twist(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MQTT_5fCommunication_2eproto);
    return ::descriptor_table_MQTT_5fCommunication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTwistFieldNumber = 1,
  };
  // .dispatch.Twist twist = 1;
  bool has_twist() const;
  private:
  bool _internal_has_twist() const;
  public:
  void clear_twist();
  const ::dispatch::Twist& twist() const;
  ::dispatch::Twist* release_twist();
  ::dispatch::Twist* mutable_twist();
  void set_allocated_twist(::dispatch::Twist* twist);
  private:
  const ::dispatch::Twist& _internal_twist() const;
  ::dispatch::Twist* _internal_mutable_twist();
  public:
  void unsafe_arena_set_allocated_twist(
      ::dispatch::Twist* twist);
  ::dispatch::Twist* unsafe_arena_release_twist();

  // @@protoc_insertion_point(class_scope:dispatch.Current_twist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::dispatch::Twist* twist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MQTT_5fCommunication_2eproto;
};
// -------------------------------------------------------------------

class Goal_pose PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dispatch.Goal_pose) */ {
 public:
  inline Goal_pose() : Goal_pose(nullptr) {};
  virtual ~Goal_pose();

  Goal_pose(const Goal_pose& from);
  Goal_pose(Goal_pose&& from) noexcept
    : Goal_pose() {
    *this = ::std::move(from);
  }

  inline Goal_pose& operator=(const Goal_pose& from) {
    CopyFrom(from);
    return *this;
  }
  inline Goal_pose& operator=(Goal_pose&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Goal_pose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Goal_pose* internal_default_instance() {
    return reinterpret_cast<const Goal_pose*>(
               &_Goal_pose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Goal_pose& a, Goal_pose& b) {
    a.Swap(&b);
  }
  inline void Swap(Goal_pose* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Goal_pose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Goal_pose* New() const final {
    return CreateMaybeMessage<Goal_pose>(nullptr);
  }

  Goal_pose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Goal_pose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Goal_pose& from);
  void MergeFrom(const Goal_pose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Goal_pose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dispatch.Goal_pose";
  }
  protected:
  explicit Goal_pose(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MQTT_5fCommunication_2eproto);
    return ::descriptor_table_MQTT_5fCommunication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 1,
  };
  // .dispatch.Pose pose = 1;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::dispatch::Pose& pose() const;
  ::dispatch::Pose* release_pose();
  ::dispatch::Pose* mutable_pose();
  void set_allocated_pose(::dispatch::Pose* pose);
  private:
  const ::dispatch::Pose& _internal_pose() const;
  ::dispatch::Pose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::dispatch::Pose* pose);
  ::dispatch::Pose* unsafe_arena_release_pose();

  // @@protoc_insertion_point(class_scope:dispatch.Goal_pose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::dispatch::Pose* pose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MQTT_5fCommunication_2eproto;
};
// -------------------------------------------------------------------

class Current_path PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dispatch.Current_path) */ {
 public:
  inline Current_path() : Current_path(nullptr) {};
  virtual ~Current_path();

  Current_path(const Current_path& from);
  Current_path(Current_path&& from) noexcept
    : Current_path() {
    *this = ::std::move(from);
  }

  inline Current_path& operator=(const Current_path& from) {
    CopyFrom(from);
    return *this;
  }
  inline Current_path& operator=(Current_path&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Current_path& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Current_path* internal_default_instance() {
    return reinterpret_cast<const Current_path*>(
               &_Current_path_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Current_path& a, Current_path& b) {
    a.Swap(&b);
  }
  inline void Swap(Current_path* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Current_path* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Current_path* New() const final {
    return CreateMaybeMessage<Current_path>(nullptr);
  }

  Current_path* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Current_path>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Current_path& from);
  void MergeFrom(const Current_path& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Current_path* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dispatch.Current_path";
  }
  protected:
  explicit Current_path(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MQTT_5fCommunication_2eproto);
    return ::descriptor_table_MQTT_5fCommunication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 1,
  };
  // repeated .dispatch.Pose pose = 1;
  int pose_size() const;
  private:
  int _internal_pose_size() const;
  public:
  void clear_pose();
  ::dispatch::Pose* mutable_pose(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dispatch::Pose >*
      mutable_pose();
  private:
  const ::dispatch::Pose& _internal_pose(int index) const;
  ::dispatch::Pose* _internal_add_pose();
  public:
  const ::dispatch::Pose& pose(int index) const;
  ::dispatch::Pose* add_pose();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dispatch::Pose >&
      pose() const;

  // @@protoc_insertion_point(class_scope:dispatch.Current_path)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dispatch::Pose > pose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MQTT_5fCommunication_2eproto;
};
// -------------------------------------------------------------------

class Goal_twist PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dispatch.Goal_twist) */ {
 public:
  inline Goal_twist() : Goal_twist(nullptr) {};
  virtual ~Goal_twist();

  Goal_twist(const Goal_twist& from);
  Goal_twist(Goal_twist&& from) noexcept
    : Goal_twist() {
    *this = ::std::move(from);
  }

  inline Goal_twist& operator=(const Goal_twist& from) {
    CopyFrom(from);
    return *this;
  }
  inline Goal_twist& operator=(Goal_twist&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Goal_twist& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Goal_twist* internal_default_instance() {
    return reinterpret_cast<const Goal_twist*>(
               &_Goal_twist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Goal_twist& a, Goal_twist& b) {
    a.Swap(&b);
  }
  inline void Swap(Goal_twist* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Goal_twist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Goal_twist* New() const final {
    return CreateMaybeMessage<Goal_twist>(nullptr);
  }

  Goal_twist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Goal_twist>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Goal_twist& from);
  void MergeFrom(const Goal_twist& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Goal_twist* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dispatch.Goal_twist";
  }
  protected:
  explicit Goal_twist(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MQTT_5fCommunication_2eproto);
    return ::descriptor_table_MQTT_5fCommunication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTwistFieldNumber = 1,
  };
  // .dispatch.Twist twist = 1;
  bool has_twist() const;
  private:
  bool _internal_has_twist() const;
  public:
  void clear_twist();
  const ::dispatch::Twist& twist() const;
  ::dispatch::Twist* release_twist();
  ::dispatch::Twist* mutable_twist();
  void set_allocated_twist(::dispatch::Twist* twist);
  private:
  const ::dispatch::Twist& _internal_twist() const;
  ::dispatch::Twist* _internal_mutable_twist();
  public:
  void unsafe_arena_set_allocated_twist(
      ::dispatch::Twist* twist);
  ::dispatch::Twist* unsafe_arena_release_twist();

  // @@protoc_insertion_point(class_scope:dispatch.Goal_twist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::dispatch::Twist* twist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MQTT_5fCommunication_2eproto;
};
// -------------------------------------------------------------------

class Multiple_goal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dispatch.Multiple_goal) */ {
 public:
  inline Multiple_goal() : Multiple_goal(nullptr) {};
  virtual ~Multiple_goal();

  Multiple_goal(const Multiple_goal& from);
  Multiple_goal(Multiple_goal&& from) noexcept
    : Multiple_goal() {
    *this = ::std::move(from);
  }

  inline Multiple_goal& operator=(const Multiple_goal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Multiple_goal& operator=(Multiple_goal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Multiple_goal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Multiple_goal* internal_default_instance() {
    return reinterpret_cast<const Multiple_goal*>(
               &_Multiple_goal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Multiple_goal& a, Multiple_goal& b) {
    a.Swap(&b);
  }
  inline void Swap(Multiple_goal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Multiple_goal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Multiple_goal* New() const final {
    return CreateMaybeMessage<Multiple_goal>(nullptr);
  }

  Multiple_goal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Multiple_goal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Multiple_goal& from);
  void MergeFrom(const Multiple_goal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Multiple_goal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dispatch.Multiple_goal";
  }
  protected:
  explicit Multiple_goal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MQTT_5fCommunication_2eproto);
    return ::descriptor_table_MQTT_5fCommunication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 1,
  };
  // repeated .dispatch.PoseStamped pose = 1;
  int pose_size() const;
  private:
  int _internal_pose_size() const;
  public:
  void clear_pose();
  ::dispatch::PoseStamped* mutable_pose(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dispatch::PoseStamped >*
      mutable_pose();
  private:
  const ::dispatch::PoseStamped& _internal_pose(int index) const;
  ::dispatch::PoseStamped* _internal_add_pose();
  public:
  const ::dispatch::PoseStamped& pose(int index) const;
  ::dispatch::PoseStamped* add_pose();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dispatch::PoseStamped >&
      pose() const;

  // @@protoc_insertion_point(class_scope:dispatch.Multiple_goal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dispatch::PoseStamped > pose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MQTT_5fCommunication_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Time

// int32 sec = 1;
inline void Time::clear_sec() {
  sec_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Time::_internal_sec() const {
  return sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Time::sec() const {
  // @@protoc_insertion_point(field_get:dispatch.Time.sec)
  return _internal_sec();
}
inline void Time::_internal_set_sec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sec_ = value;
}
inline void Time::set_sec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sec(value);
  // @@protoc_insertion_point(field_set:dispatch.Time.sec)
}

// int32 nsec = 2;
inline void Time::clear_nsec() {
  nsec_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Time::_internal_nsec() const {
  return nsec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Time::nsec() const {
  // @@protoc_insertion_point(field_get:dispatch.Time.nsec)
  return _internal_nsec();
}
inline void Time::_internal_set_nsec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nsec_ = value;
}
inline void Time::set_nsec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nsec(value);
  // @@protoc_insertion_point(field_set:dispatch.Time.nsec)
}

// -------------------------------------------------------------------

// Header

// .dispatch.Time stamp = 1;
inline bool Header::_internal_has_stamp() const {
  return this != internal_default_instance() && stamp_ != nullptr;
}
inline bool Header::has_stamp() const {
  return _internal_has_stamp();
}
inline void Header::clear_stamp() {
  if (GetArena() == nullptr && stamp_ != nullptr) {
    delete stamp_;
  }
  stamp_ = nullptr;
}
inline const ::dispatch::Time& Header::_internal_stamp() const {
  const ::dispatch::Time* p = stamp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dispatch::Time*>(
      &::dispatch::_Time_default_instance_);
}
inline const ::dispatch::Time& Header::stamp() const {
  // @@protoc_insertion_point(field_get:dispatch.Header.stamp)
  return _internal_stamp();
}
inline void Header::unsafe_arena_set_allocated_stamp(
    ::dispatch::Time* stamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stamp_);
  }
  stamp_ = stamp;
  if (stamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dispatch.Header.stamp)
}
inline ::dispatch::Time* Header::release_stamp() {
  auto temp = unsafe_arena_release_stamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dispatch::Time* Header::unsafe_arena_release_stamp() {
  // @@protoc_insertion_point(field_release:dispatch.Header.stamp)
  
  ::dispatch::Time* temp = stamp_;
  stamp_ = nullptr;
  return temp;
}
inline ::dispatch::Time* Header::_internal_mutable_stamp() {
  
  if (stamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::dispatch::Time>(GetArena());
    stamp_ = p;
  }
  return stamp_;
}
inline ::dispatch::Time* Header::mutable_stamp() {
  // @@protoc_insertion_point(field_mutable:dispatch.Header.stamp)
  return _internal_mutable_stamp();
}
inline void Header::set_allocated_stamp(::dispatch::Time* stamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stamp_;
  }
  if (stamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stamp);
    if (message_arena != submessage_arena) {
      stamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stamp, submessage_arena);
    }
    
  } else {
    
  }
  stamp_ = stamp;
  // @@protoc_insertion_point(field_set_allocated:dispatch.Header.stamp)
}

// string frame_id = 2;
inline void Header::clear_frame_id() {
  frame_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Header::frame_id() const {
  // @@protoc_insertion_point(field_get:dispatch.Header.frame_id)
  return _internal_frame_id();
}
inline void Header::set_frame_id(const std::string& value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:dispatch.Header.frame_id)
}
inline std::string* Header::mutable_frame_id() {
  // @@protoc_insertion_point(field_mutable:dispatch.Header.frame_id)
  return _internal_mutable_frame_id();
}
inline const std::string& Header::_internal_frame_id() const {
  return frame_id_.Get();
}
inline void Header::_internal_set_frame_id(const std::string& value) {
  
  frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Header::set_frame_id(std::string&& value) {
  
  frame_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dispatch.Header.frame_id)
}
inline void Header::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dispatch.Header.frame_id)
}
inline void Header::set_frame_id(const char* value,
    size_t size) {
  
  frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dispatch.Header.frame_id)
}
inline std::string* Header::_internal_mutable_frame_id() {
  
  return frame_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Header::release_frame_id() {
  // @@protoc_insertion_point(field_release:dispatch.Header.frame_id)
  return frame_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Header::set_allocated_frame_id(std::string* frame_id) {
  if (frame_id != nullptr) {
    
  } else {
    
  }
  frame_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dispatch.Header.frame_id)
}
inline std::string* Header::unsafe_arena_release_frame_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dispatch.Header.frame_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return frame_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Header::unsafe_arena_set_allocated_frame_id(
    std::string* frame_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (frame_id != nullptr) {
    
  } else {
    
  }
  frame_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      frame_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dispatch.Header.frame_id)
}

// -------------------------------------------------------------------

// Point

// double x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline double Point::_internal_x() const {
  return x_;
}
inline double Point::x() const {
  // @@protoc_insertion_point(field_get:dispatch.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Point::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:dispatch.Point.x)
}

// double y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline double Point::_internal_y() const {
  return y_;
}
inline double Point::y() const {
  // @@protoc_insertion_point(field_get:dispatch.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Point::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:dispatch.Point.y)
}

// double z = 3;
inline void Point::clear_z() {
  z_ = 0;
}
inline double Point::_internal_z() const {
  return z_;
}
inline double Point::z() const {
  // @@protoc_insertion_point(field_get:dispatch.Point.z)
  return _internal_z();
}
inline void Point::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Point::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:dispatch.Point.z)
}

// -------------------------------------------------------------------

// Quaternion

// double x = 1;
inline void Quaternion::clear_x() {
  x_ = 0;
}
inline double Quaternion::_internal_x() const {
  return x_;
}
inline double Quaternion::x() const {
  // @@protoc_insertion_point(field_get:dispatch.Quaternion.x)
  return _internal_x();
}
inline void Quaternion::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Quaternion::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:dispatch.Quaternion.x)
}

// double y = 2;
inline void Quaternion::clear_y() {
  y_ = 0;
}
inline double Quaternion::_internal_y() const {
  return y_;
}
inline double Quaternion::y() const {
  // @@protoc_insertion_point(field_get:dispatch.Quaternion.y)
  return _internal_y();
}
inline void Quaternion::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Quaternion::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:dispatch.Quaternion.y)
}

// double z = 3;
inline void Quaternion::clear_z() {
  z_ = 0;
}
inline double Quaternion::_internal_z() const {
  return z_;
}
inline double Quaternion::z() const {
  // @@protoc_insertion_point(field_get:dispatch.Quaternion.z)
  return _internal_z();
}
inline void Quaternion::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Quaternion::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:dispatch.Quaternion.z)
}

// double w = 4;
inline void Quaternion::clear_w() {
  w_ = 0;
}
inline double Quaternion::_internal_w() const {
  return w_;
}
inline double Quaternion::w() const {
  // @@protoc_insertion_point(field_get:dispatch.Quaternion.w)
  return _internal_w();
}
inline void Quaternion::_internal_set_w(double value) {
  
  w_ = value;
}
inline void Quaternion::set_w(double value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:dispatch.Quaternion.w)
}

// -------------------------------------------------------------------

// Pose

// .dispatch.Point position = 1;
inline bool Pose::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool Pose::has_position() const {
  return _internal_has_position();
}
inline void Pose::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::dispatch::Point& Pose::_internal_position() const {
  const ::dispatch::Point* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dispatch::Point*>(
      &::dispatch::_Point_default_instance_);
}
inline const ::dispatch::Point& Pose::position() const {
  // @@protoc_insertion_point(field_get:dispatch.Pose.position)
  return _internal_position();
}
inline void Pose::unsafe_arena_set_allocated_position(
    ::dispatch::Point* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dispatch.Pose.position)
}
inline ::dispatch::Point* Pose::release_position() {
  auto temp = unsafe_arena_release_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dispatch::Point* Pose::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:dispatch.Pose.position)
  
  ::dispatch::Point* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::dispatch::Point* Pose::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::dispatch::Point>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::dispatch::Point* Pose::mutable_position() {
  // @@protoc_insertion_point(field_mutable:dispatch.Pose.position)
  return _internal_mutable_position();
}
inline void Pose::set_allocated_position(::dispatch::Point* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:dispatch.Pose.position)
}

// .dispatch.Quaternion orientation = 2;
inline bool Pose::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool Pose::has_orientation() const {
  return _internal_has_orientation();
}
inline void Pose::clear_orientation() {
  if (GetArena() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::dispatch::Quaternion& Pose::_internal_orientation() const {
  const ::dispatch::Quaternion* p = orientation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dispatch::Quaternion*>(
      &::dispatch::_Quaternion_default_instance_);
}
inline const ::dispatch::Quaternion& Pose::orientation() const {
  // @@protoc_insertion_point(field_get:dispatch.Pose.orientation)
  return _internal_orientation();
}
inline void Pose::unsafe_arena_set_allocated_orientation(
    ::dispatch::Quaternion* orientation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dispatch.Pose.orientation)
}
inline ::dispatch::Quaternion* Pose::release_orientation() {
  auto temp = unsafe_arena_release_orientation();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dispatch::Quaternion* Pose::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:dispatch.Pose.orientation)
  
  ::dispatch::Quaternion* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::dispatch::Quaternion* Pose::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::dispatch::Quaternion>(GetArena());
    orientation_ = p;
  }
  return orientation_;
}
inline ::dispatch::Quaternion* Pose::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:dispatch.Pose.orientation)
  return _internal_mutable_orientation();
}
inline void Pose::set_allocated_orientation(::dispatch::Quaternion* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(orientation);
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:dispatch.Pose.orientation)
}

// -------------------------------------------------------------------

// PoseStamped

// .dispatch.Header header = 1;
inline bool PoseStamped::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool PoseStamped::has_header() const {
  return _internal_has_header();
}
inline void PoseStamped::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::dispatch::Header& PoseStamped::_internal_header() const {
  const ::dispatch::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dispatch::Header*>(
      &::dispatch::_Header_default_instance_);
}
inline const ::dispatch::Header& PoseStamped::header() const {
  // @@protoc_insertion_point(field_get:dispatch.PoseStamped.header)
  return _internal_header();
}
inline void PoseStamped::unsafe_arena_set_allocated_header(
    ::dispatch::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dispatch.PoseStamped.header)
}
inline ::dispatch::Header* PoseStamped::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dispatch::Header* PoseStamped::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:dispatch.PoseStamped.header)
  
  ::dispatch::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::dispatch::Header* PoseStamped::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::dispatch::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::dispatch::Header* PoseStamped::mutable_header() {
  // @@protoc_insertion_point(field_mutable:dispatch.PoseStamped.header)
  return _internal_mutable_header();
}
inline void PoseStamped::set_allocated_header(::dispatch::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:dispatch.PoseStamped.header)
}

// .dispatch.Pose pose = 2;
inline bool PoseStamped::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool PoseStamped::has_pose() const {
  return _internal_has_pose();
}
inline void PoseStamped::clear_pose() {
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
inline const ::dispatch::Pose& PoseStamped::_internal_pose() const {
  const ::dispatch::Pose* p = pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dispatch::Pose*>(
      &::dispatch::_Pose_default_instance_);
}
inline const ::dispatch::Pose& PoseStamped::pose() const {
  // @@protoc_insertion_point(field_get:dispatch.PoseStamped.pose)
  return _internal_pose();
}
inline void PoseStamped::unsafe_arena_set_allocated_pose(
    ::dispatch::Pose* pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dispatch.PoseStamped.pose)
}
inline ::dispatch::Pose* PoseStamped::release_pose() {
  auto temp = unsafe_arena_release_pose();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dispatch::Pose* PoseStamped::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:dispatch.PoseStamped.pose)
  
  ::dispatch::Pose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::dispatch::Pose* PoseStamped::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::dispatch::Pose>(GetArena());
    pose_ = p;
  }
  return pose_;
}
inline ::dispatch::Pose* PoseStamped::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:dispatch.PoseStamped.pose)
  return _internal_mutable_pose();
}
inline void PoseStamped::set_allocated_pose(::dispatch::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pose);
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:dispatch.PoseStamped.pose)
}

// -------------------------------------------------------------------

// Path

// .dispatch.Header header = 1;
inline bool Path::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool Path::has_header() const {
  return _internal_has_header();
}
inline void Path::clear_header() {
  if (GetArena() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::dispatch::Header& Path::_internal_header() const {
  const ::dispatch::Header* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dispatch::Header*>(
      &::dispatch::_Header_default_instance_);
}
inline const ::dispatch::Header& Path::header() const {
  // @@protoc_insertion_point(field_get:dispatch.Path.header)
  return _internal_header();
}
inline void Path::unsafe_arena_set_allocated_header(
    ::dispatch::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dispatch.Path.header)
}
inline ::dispatch::Header* Path::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dispatch::Header* Path::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:dispatch.Path.header)
  
  ::dispatch::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::dispatch::Header* Path::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::dispatch::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::dispatch::Header* Path::mutable_header() {
  // @@protoc_insertion_point(field_mutable:dispatch.Path.header)
  return _internal_mutable_header();
}
inline void Path::set_allocated_header(::dispatch::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:dispatch.Path.header)
}

// repeated .dispatch.PoseStamped pose = 2;
inline int Path::_internal_pose_size() const {
  return pose_.size();
}
inline int Path::pose_size() const {
  return _internal_pose_size();
}
inline void Path::clear_pose() {
  pose_.Clear();
}
inline ::dispatch::PoseStamped* Path::mutable_pose(int index) {
  // @@protoc_insertion_point(field_mutable:dispatch.Path.pose)
  return pose_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dispatch::PoseStamped >*
Path::mutable_pose() {
  // @@protoc_insertion_point(field_mutable_list:dispatch.Path.pose)
  return &pose_;
}
inline const ::dispatch::PoseStamped& Path::_internal_pose(int index) const {
  return pose_.Get(index);
}
inline const ::dispatch::PoseStamped& Path::pose(int index) const {
  // @@protoc_insertion_point(field_get:dispatch.Path.pose)
  return _internal_pose(index);
}
inline ::dispatch::PoseStamped* Path::_internal_add_pose() {
  return pose_.Add();
}
inline ::dispatch::PoseStamped* Path::add_pose() {
  // @@protoc_insertion_point(field_add:dispatch.Path.pose)
  return _internal_add_pose();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dispatch::PoseStamped >&
Path::pose() const {
  // @@protoc_insertion_point(field_list:dispatch.Path.pose)
  return pose_;
}

// -------------------------------------------------------------------

// Vector3

// double x = 1;
inline void Vector3::clear_x() {
  x_ = 0;
}
inline double Vector3::_internal_x() const {
  return x_;
}
inline double Vector3::x() const {
  // @@protoc_insertion_point(field_get:dispatch.Vector3.x)
  return _internal_x();
}
inline void Vector3::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Vector3::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:dispatch.Vector3.x)
}

// double y = 2;
inline void Vector3::clear_y() {
  y_ = 0;
}
inline double Vector3::_internal_y() const {
  return y_;
}
inline double Vector3::y() const {
  // @@protoc_insertion_point(field_get:dispatch.Vector3.y)
  return _internal_y();
}
inline void Vector3::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Vector3::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:dispatch.Vector3.y)
}

// double z = 3;
inline void Vector3::clear_z() {
  z_ = 0;
}
inline double Vector3::_internal_z() const {
  return z_;
}
inline double Vector3::z() const {
  // @@protoc_insertion_point(field_get:dispatch.Vector3.z)
  return _internal_z();
}
inline void Vector3::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Vector3::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:dispatch.Vector3.z)
}

// -------------------------------------------------------------------

// Twist

// .dispatch.Vector3 linear = 1;
inline bool Twist::_internal_has_linear() const {
  return this != internal_default_instance() && linear_ != nullptr;
}
inline bool Twist::has_linear() const {
  return _internal_has_linear();
}
inline void Twist::clear_linear() {
  if (GetArena() == nullptr && linear_ != nullptr) {
    delete linear_;
  }
  linear_ = nullptr;
}
inline const ::dispatch::Vector3& Twist::_internal_linear() const {
  const ::dispatch::Vector3* p = linear_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dispatch::Vector3*>(
      &::dispatch::_Vector3_default_instance_);
}
inline const ::dispatch::Vector3& Twist::linear() const {
  // @@protoc_insertion_point(field_get:dispatch.Twist.linear)
  return _internal_linear();
}
inline void Twist::unsafe_arena_set_allocated_linear(
    ::dispatch::Vector3* linear) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_);
  }
  linear_ = linear;
  if (linear) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dispatch.Twist.linear)
}
inline ::dispatch::Vector3* Twist::release_linear() {
  auto temp = unsafe_arena_release_linear();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dispatch::Vector3* Twist::unsafe_arena_release_linear() {
  // @@protoc_insertion_point(field_release:dispatch.Twist.linear)
  
  ::dispatch::Vector3* temp = linear_;
  linear_ = nullptr;
  return temp;
}
inline ::dispatch::Vector3* Twist::_internal_mutable_linear() {
  
  if (linear_ == nullptr) {
    auto* p = CreateMaybeMessage<::dispatch::Vector3>(GetArena());
    linear_ = p;
  }
  return linear_;
}
inline ::dispatch::Vector3* Twist::mutable_linear() {
  // @@protoc_insertion_point(field_mutable:dispatch.Twist.linear)
  return _internal_mutable_linear();
}
inline void Twist::set_allocated_linear(::dispatch::Vector3* linear) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete linear_;
  }
  if (linear) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(linear);
    if (message_arena != submessage_arena) {
      linear = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear, submessage_arena);
    }
    
  } else {
    
  }
  linear_ = linear;
  // @@protoc_insertion_point(field_set_allocated:dispatch.Twist.linear)
}

// .dispatch.Vector3 angular = 2;
inline bool Twist::_internal_has_angular() const {
  return this != internal_default_instance() && angular_ != nullptr;
}
inline bool Twist::has_angular() const {
  return _internal_has_angular();
}
inline void Twist::clear_angular() {
  if (GetArena() == nullptr && angular_ != nullptr) {
    delete angular_;
  }
  angular_ = nullptr;
}
inline const ::dispatch::Vector3& Twist::_internal_angular() const {
  const ::dispatch::Vector3* p = angular_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dispatch::Vector3*>(
      &::dispatch::_Vector3_default_instance_);
}
inline const ::dispatch::Vector3& Twist::angular() const {
  // @@protoc_insertion_point(field_get:dispatch.Twist.angular)
  return _internal_angular();
}
inline void Twist::unsafe_arena_set_allocated_angular(
    ::dispatch::Vector3* angular) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_);
  }
  angular_ = angular;
  if (angular) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dispatch.Twist.angular)
}
inline ::dispatch::Vector3* Twist::release_angular() {
  auto temp = unsafe_arena_release_angular();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dispatch::Vector3* Twist::unsafe_arena_release_angular() {
  // @@protoc_insertion_point(field_release:dispatch.Twist.angular)
  
  ::dispatch::Vector3* temp = angular_;
  angular_ = nullptr;
  return temp;
}
inline ::dispatch::Vector3* Twist::_internal_mutable_angular() {
  
  if (angular_ == nullptr) {
    auto* p = CreateMaybeMessage<::dispatch::Vector3>(GetArena());
    angular_ = p;
  }
  return angular_;
}
inline ::dispatch::Vector3* Twist::mutable_angular() {
  // @@protoc_insertion_point(field_mutable:dispatch.Twist.angular)
  return _internal_mutable_angular();
}
inline void Twist::set_allocated_angular(::dispatch::Vector3* angular) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete angular_;
  }
  if (angular) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(angular);
    if (message_arena != submessage_arena) {
      angular = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular, submessage_arena);
    }
    
  } else {
    
  }
  angular_ = angular;
  // @@protoc_insertion_point(field_set_allocated:dispatch.Twist.angular)
}

// -------------------------------------------------------------------

// Current_pose

// .dispatch.Pose pose = 1;
inline bool Current_pose::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool Current_pose::has_pose() const {
  return _internal_has_pose();
}
inline void Current_pose::clear_pose() {
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
inline const ::dispatch::Pose& Current_pose::_internal_pose() const {
  const ::dispatch::Pose* p = pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dispatch::Pose*>(
      &::dispatch::_Pose_default_instance_);
}
inline const ::dispatch::Pose& Current_pose::pose() const {
  // @@protoc_insertion_point(field_get:dispatch.Current_pose.pose)
  return _internal_pose();
}
inline void Current_pose::unsafe_arena_set_allocated_pose(
    ::dispatch::Pose* pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dispatch.Current_pose.pose)
}
inline ::dispatch::Pose* Current_pose::release_pose() {
  auto temp = unsafe_arena_release_pose();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dispatch::Pose* Current_pose::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:dispatch.Current_pose.pose)
  
  ::dispatch::Pose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::dispatch::Pose* Current_pose::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::dispatch::Pose>(GetArena());
    pose_ = p;
  }
  return pose_;
}
inline ::dispatch::Pose* Current_pose::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:dispatch.Current_pose.pose)
  return _internal_mutable_pose();
}
inline void Current_pose::set_allocated_pose(::dispatch::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pose);
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:dispatch.Current_pose.pose)
}

// -------------------------------------------------------------------

// Current_twist

// .dispatch.Twist twist = 1;
inline bool Current_twist::_internal_has_twist() const {
  return this != internal_default_instance() && twist_ != nullptr;
}
inline bool Current_twist::has_twist() const {
  return _internal_has_twist();
}
inline void Current_twist::clear_twist() {
  if (GetArena() == nullptr && twist_ != nullptr) {
    delete twist_;
  }
  twist_ = nullptr;
}
inline const ::dispatch::Twist& Current_twist::_internal_twist() const {
  const ::dispatch::Twist* p = twist_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dispatch::Twist*>(
      &::dispatch::_Twist_default_instance_);
}
inline const ::dispatch::Twist& Current_twist::twist() const {
  // @@protoc_insertion_point(field_get:dispatch.Current_twist.twist)
  return _internal_twist();
}
inline void Current_twist::unsafe_arena_set_allocated_twist(
    ::dispatch::Twist* twist) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(twist_);
  }
  twist_ = twist;
  if (twist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dispatch.Current_twist.twist)
}
inline ::dispatch::Twist* Current_twist::release_twist() {
  auto temp = unsafe_arena_release_twist();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dispatch::Twist* Current_twist::unsafe_arena_release_twist() {
  // @@protoc_insertion_point(field_release:dispatch.Current_twist.twist)
  
  ::dispatch::Twist* temp = twist_;
  twist_ = nullptr;
  return temp;
}
inline ::dispatch::Twist* Current_twist::_internal_mutable_twist() {
  
  if (twist_ == nullptr) {
    auto* p = CreateMaybeMessage<::dispatch::Twist>(GetArena());
    twist_ = p;
  }
  return twist_;
}
inline ::dispatch::Twist* Current_twist::mutable_twist() {
  // @@protoc_insertion_point(field_mutable:dispatch.Current_twist.twist)
  return _internal_mutable_twist();
}
inline void Current_twist::set_allocated_twist(::dispatch::Twist* twist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete twist_;
  }
  if (twist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(twist);
    if (message_arena != submessage_arena) {
      twist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, twist, submessage_arena);
    }
    
  } else {
    
  }
  twist_ = twist;
  // @@protoc_insertion_point(field_set_allocated:dispatch.Current_twist.twist)
}

// -------------------------------------------------------------------

// Goal_pose

// .dispatch.Pose pose = 1;
inline bool Goal_pose::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool Goal_pose::has_pose() const {
  return _internal_has_pose();
}
inline void Goal_pose::clear_pose() {
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
inline const ::dispatch::Pose& Goal_pose::_internal_pose() const {
  const ::dispatch::Pose* p = pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dispatch::Pose*>(
      &::dispatch::_Pose_default_instance_);
}
inline const ::dispatch::Pose& Goal_pose::pose() const {
  // @@protoc_insertion_point(field_get:dispatch.Goal_pose.pose)
  return _internal_pose();
}
inline void Goal_pose::unsafe_arena_set_allocated_pose(
    ::dispatch::Pose* pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dispatch.Goal_pose.pose)
}
inline ::dispatch::Pose* Goal_pose::release_pose() {
  auto temp = unsafe_arena_release_pose();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dispatch::Pose* Goal_pose::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:dispatch.Goal_pose.pose)
  
  ::dispatch::Pose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::dispatch::Pose* Goal_pose::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::dispatch::Pose>(GetArena());
    pose_ = p;
  }
  return pose_;
}
inline ::dispatch::Pose* Goal_pose::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:dispatch.Goal_pose.pose)
  return _internal_mutable_pose();
}
inline void Goal_pose::set_allocated_pose(::dispatch::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pose);
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:dispatch.Goal_pose.pose)
}

// -------------------------------------------------------------------

// Current_path

// repeated .dispatch.Pose pose = 1;
inline int Current_path::_internal_pose_size() const {
  return pose_.size();
}
inline int Current_path::pose_size() const {
  return _internal_pose_size();
}
inline void Current_path::clear_pose() {
  pose_.Clear();
}
inline ::dispatch::Pose* Current_path::mutable_pose(int index) {
  // @@protoc_insertion_point(field_mutable:dispatch.Current_path.pose)
  return pose_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dispatch::Pose >*
Current_path::mutable_pose() {
  // @@protoc_insertion_point(field_mutable_list:dispatch.Current_path.pose)
  return &pose_;
}
inline const ::dispatch::Pose& Current_path::_internal_pose(int index) const {
  return pose_.Get(index);
}
inline const ::dispatch::Pose& Current_path::pose(int index) const {
  // @@protoc_insertion_point(field_get:dispatch.Current_path.pose)
  return _internal_pose(index);
}
inline ::dispatch::Pose* Current_path::_internal_add_pose() {
  return pose_.Add();
}
inline ::dispatch::Pose* Current_path::add_pose() {
  // @@protoc_insertion_point(field_add:dispatch.Current_path.pose)
  return _internal_add_pose();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dispatch::Pose >&
Current_path::pose() const {
  // @@protoc_insertion_point(field_list:dispatch.Current_path.pose)
  return pose_;
}

// -------------------------------------------------------------------

// Goal_twist

// .dispatch.Twist twist = 1;
inline bool Goal_twist::_internal_has_twist() const {
  return this != internal_default_instance() && twist_ != nullptr;
}
inline bool Goal_twist::has_twist() const {
  return _internal_has_twist();
}
inline void Goal_twist::clear_twist() {
  if (GetArena() == nullptr && twist_ != nullptr) {
    delete twist_;
  }
  twist_ = nullptr;
}
inline const ::dispatch::Twist& Goal_twist::_internal_twist() const {
  const ::dispatch::Twist* p = twist_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dispatch::Twist*>(
      &::dispatch::_Twist_default_instance_);
}
inline const ::dispatch::Twist& Goal_twist::twist() const {
  // @@protoc_insertion_point(field_get:dispatch.Goal_twist.twist)
  return _internal_twist();
}
inline void Goal_twist::unsafe_arena_set_allocated_twist(
    ::dispatch::Twist* twist) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(twist_);
  }
  twist_ = twist;
  if (twist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dispatch.Goal_twist.twist)
}
inline ::dispatch::Twist* Goal_twist::release_twist() {
  auto temp = unsafe_arena_release_twist();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dispatch::Twist* Goal_twist::unsafe_arena_release_twist() {
  // @@protoc_insertion_point(field_release:dispatch.Goal_twist.twist)
  
  ::dispatch::Twist* temp = twist_;
  twist_ = nullptr;
  return temp;
}
inline ::dispatch::Twist* Goal_twist::_internal_mutable_twist() {
  
  if (twist_ == nullptr) {
    auto* p = CreateMaybeMessage<::dispatch::Twist>(GetArena());
    twist_ = p;
  }
  return twist_;
}
inline ::dispatch::Twist* Goal_twist::mutable_twist() {
  // @@protoc_insertion_point(field_mutable:dispatch.Goal_twist.twist)
  return _internal_mutable_twist();
}
inline void Goal_twist::set_allocated_twist(::dispatch::Twist* twist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete twist_;
  }
  if (twist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(twist);
    if (message_arena != submessage_arena) {
      twist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, twist, submessage_arena);
    }
    
  } else {
    
  }
  twist_ = twist;
  // @@protoc_insertion_point(field_set_allocated:dispatch.Goal_twist.twist)
}

// -------------------------------------------------------------------

// Multiple_goal

// repeated .dispatch.PoseStamped pose = 1;
inline int Multiple_goal::_internal_pose_size() const {
  return pose_.size();
}
inline int Multiple_goal::pose_size() const {
  return _internal_pose_size();
}
inline void Multiple_goal::clear_pose() {
  pose_.Clear();
}
inline ::dispatch::PoseStamped* Multiple_goal::mutable_pose(int index) {
  // @@protoc_insertion_point(field_mutable:dispatch.Multiple_goal.pose)
  return pose_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dispatch::PoseStamped >*
Multiple_goal::mutable_pose() {
  // @@protoc_insertion_point(field_mutable_list:dispatch.Multiple_goal.pose)
  return &pose_;
}
inline const ::dispatch::PoseStamped& Multiple_goal::_internal_pose(int index) const {
  return pose_.Get(index);
}
inline const ::dispatch::PoseStamped& Multiple_goal::pose(int index) const {
  // @@protoc_insertion_point(field_get:dispatch.Multiple_goal.pose)
  return _internal_pose(index);
}
inline ::dispatch::PoseStamped* Multiple_goal::_internal_add_pose() {
  return pose_.Add();
}
inline ::dispatch::PoseStamped* Multiple_goal::add_pose() {
  // @@protoc_insertion_point(field_add:dispatch.Multiple_goal.pose)
  return _internal_add_pose();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dispatch::PoseStamped >&
Multiple_goal::pose() const {
  // @@protoc_insertion_point(field_list:dispatch.Multiple_goal.pose)
  return pose_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dispatch

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MQTT_5fCommunication_2eproto
