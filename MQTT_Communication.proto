syntax = "proto3";

import "MQTT_Communication_enum.proto";

package dispatch;
/*  base types */

// Header
message Time
{
    int32 sec = 1;
    int32 nsec = 2;
}
message Header {
    Time stamp = 1;
    string frame_id = 2;
}

// pose
message Point {
    double x = 1;
    double y = 2;
    double z = 3;
}
message Quaternion {
    double x = 1;
    double y = 2;
    double z = 3;
    double w = 4;
}
message Pose {
    Point position = 1;
    Quaternion orientation = 2;
}
message PoseStamped {
    Header header = 1;
    Pose pose = 2;
}

// path
message Path {
    Header header = 1;
    repeated PoseStamped pose = 2;
}

// twist
message Vector3 {
    double x = 1;
    double y = 2;
    double z = 3;
}
message Twist {
    Vector3 linear = 1;
    Vector3 angular = 2;
}

/* enabled data */
// 反馈信息：当前位置
// platform/vehicle/position/vehicle_id
message Current_pose {
    Pose pose = 1;
}
// 反馈信息：当前速度
// platform/vehicle/current_twist/vehicle_id
message Current_twist {
    Twist twist = 1;
}
// 下发信息：目标位置
// platform/vehicle/goal_pose/vehicle_id
message Goal_pose {
    Pose pose = 1;
}
// 反馈信息：当前路线
// platform/vehicle/current_path/vehicle_id
message Current_path {
    repeated Pose pose = 1;
}
// 反馈信息：带编号信息的路线
// platform/vehicle/upload_path_with_id/vehicle_id
message Upload_path_with_id{
    uint32 path_id = 1; // path_id必须为正并且小于2^31 - 1
    Path upload_path = 2;
}
// 下发信息：指令速度
// platform/vehicle/goal_twist/vehicle_id
message Goal_twist {
    Twist twist = 1;
}
// 下发信息：多目标列表
// platform/vehicle/multiple_goal/vehicle_id
message Multiple_goal {
    repeated PoseStamped pose = 1;
}


//消息通用头部
message MsgHeader
{
    uint64 timestamp = 1;  //时间戳精确的毫秒
    uint32 msg_id = 2;     //消息Id
}


//车辆信息
//platform/vehicle/info/vehicle_id
message VehicleInfo
{
    MsgHeader header = 1;   //消息头部
    Pose pose = 2;          //车辆位置
    Twist twist = 3;        //车辆速度
    VehicleMotionState motion = 4;   //运动状态
    DrivingMode driving_mode = 5;    //驾驶模式
}


//执行动作
//platform/action/request/vehicle_id
message ActionRequest
{
    MsgHeader header = 1;
    ActionType action_type = 2;  //动作类型
    Current_path path = 3;      //路径
    Goal_pose goal = 4;         //目标位置
    uint32 park_id = 5;         //车位id
}

//执行动作响应
//platform/action/response/vehicle_id
message ActionResponse
{
    MsgHeader header = 1;
    int32 error_code = 2;
    string error_msg = 3;
}

//车辆任务
//platform/task/request/vehicle_id
message TaskRequest
{
    MsgHeader header = 1;
    TaskType task_type = 2;     //任务类型 上料 卸料
    uint32 area_id = 3;         //位置id
}

//任务结果
//platform/task/response/vehicle_id
message TaskResult 
{
    MsgHeader header = 1;
    TaskType task_type = 2;     //任务类型 上料 卸料
    int32 error_code = 3;       //任务结果 0 成功
    string error_msg = 4;
}

//紧急制动
//platform/vehicle/emergencybrake/vehicle_id
message EmergencyBrake
{
    MsgHeader header = 1;   //消息头部
    bool valid = 2;  //true 生效 false 取消
}

//心跳消息
message Heartbeat
{
    MsgHeader header = 1;
    //empty
}

//心跳消息ACK
message HeartbeatACK
{
    MsgHeader header = 1;
}


//故障信息
//platform/vehicle/fault/vehicle_id
message FaultInformation
{
    MsgHeader header = 1;
    FaultType type = 2;     //故障类型
    uint32 fault_code = 3;  //故障码
    string fault_str = 4;   //故障描述
}





